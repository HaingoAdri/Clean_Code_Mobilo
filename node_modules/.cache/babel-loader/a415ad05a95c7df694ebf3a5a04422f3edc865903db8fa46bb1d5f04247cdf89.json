{"ast":null,"code":"import { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'Introduction_reponse',\n  props: {\n    titre: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      metaData: null,\n      updatedDescription: '',\n      updateModalInstance: null\n    };\n  },\n  mounted() {\n    this.fetchSearchInformation();\n  },\n  methods: {\n    // Récupérer les données par titre (ou un autre critère)\n    async fetchSearchInformation() {\n      try {\n        const response = await fetchData(`/information/search/${encodeURIComponent(this.titre)}`);\n        if (response) {\n          this.metaData = response;\n          this.updatedDescription = this.metaData.details; // Préremplir le champ de mise à jour\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    },\n    // Ouvrir le modal de mise à jour\n    openUpdateModal() {\n      const modalElement = document.getElementById('updateModal');\n      this.updateModalInstance = new bootstrap.Modal(modalElement);\n      this.updateModalInstance.show();\n    },\n    // Gestion de la mise à jour par ID\n    async handleUpdate() {\n      try {\n        const updatedData = {\n          details: this.updatedDescription\n        };\n        // Utiliser l'ID pour la mise à jour\n        await putData(`/information/update_inforamtion/${this.metaData.id}`, updatedData);\n        alert('Description mise à jour avec succès !');\n        this.metaData.details = this.updatedDescription; // Mettre à jour localement après la réussite de l'update\n        this.updateModalInstance.hide(); // Fermer le modal après mise à jour\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour des données:', error);\n      }\n    },\n    // Gestion de la suppression par ID\n    async handleDelete() {\n      if (confirm('Voulez-vous vraiment supprimer cette information ?')) {\n        try {\n          // Utiliser l'ID pour la suppression\n          await deleteData(`/information/delete_information/${this.metaData.id}`);\n          alert('Données supprimées avec succès !');\n          this.metaData = null; // Réinitialiser les données après suppression\n        } catch (error) {\n          console.error('Erreur lors de la suppression des données:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchData","putData","deleteData","bootstrap","name","props","titre","type","String","required","data","metaData","updatedDescription","updateModalInstance","mounted","fetchSearchInformation","methods","response","encodeURIComponent","details","error","console","openUpdateModal","modalElement","document","getElementById","Modal","show","handleUpdate","updatedData","id","alert","hide","handleDelete","confirm"],"sources":["/Users/eva_smartelia/Documents/Clean_Code_Mobilo/src/components/endpoints_menu/reponse/Introduction_reponse.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n        <div class=\"card-header rounded-bottom rounded-4 d-flex justify-content-between\">\n            <h3 class=\"py-2\">Introduction de l'endpoint actuelle</h3>\n            <div class=\"a\">\n                <!-- Bouton pour ouvrir le modal de mise à jour -->\n                <button class=\"btn m-2\" @click=\"openUpdateModal\"><i class=\"bi bi-pen-fill\"></i></button>\n                <!-- Bouton pour la suppression -->\n                <button class=\"btn\" @click=\"handleDelete\"><i class=\"bi bi-file-earmark-x-fill\"></i></button>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <blockquote class=\"blockquote mb-0\">\n                <p v-if=\"metaData\">{{ metaData.details }}</p>\n                <p v-else>Aucune description disponible pour ce type.</p>\n            </blockquote>\n        </div>\n\n        <!-- Modal pour la mise à jour de la description -->\n        <div class=\"modal fade\" id=\"updateModal\" tabindex=\"-1\" aria-labelledby=\"updateModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"updateModalLabel\">Mise à jour de la description</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form @submit.prevent=\"handleUpdate\">\n                            <div class=\"mb-3\">\n                                <label for=\"description\" class=\"form-label\">Description :</label>\n                                <textarea v-model=\"updatedDescription\" class=\"form-control\" id=\"description\" rows=\"3\"></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">Mettre à jour</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\n\nexport default {\n    name: 'Introduction_reponse',\n    props: {\n        titre: {\n            type: String,\n            required: true\n        }\n    },\n    data() {\n        return {\n            metaData: null,\n            updatedDescription: '',\n            updateModalInstance: null,\n        };\n    },\n    mounted() {\n        this.fetchSearchInformation();\n    },\n    methods: {\n        // Récupérer les données par titre (ou un autre critère)\n        async fetchSearchInformation() {\n            try {\n                const response = await fetchData(`/information/search/${encodeURIComponent(this.titre)}`);\n                if (response) {\n                    this.metaData = response;\n                    this.updatedDescription = this.metaData.details; // Préremplir le champ de mise à jour\n                }\n            } catch (error) {\n                console.error('Erreur lors de la récupération des données:', error);\n            }\n        },\n        \n        // Ouvrir le modal de mise à jour\n        openUpdateModal() {\n            const modalElement = document.getElementById('updateModal');\n            this.updateModalInstance = new bootstrap.Modal(modalElement);\n            this.updateModalInstance.show();\n        },\n        \n        // Gestion de la mise à jour par ID\n        async handleUpdate() {\n            try {\n                const updatedData = {\n                    details: this.updatedDescription\n                };\n                // Utiliser l'ID pour la mise à jour\n                await putData(`/information/update_inforamtion/${this.metaData.id}`, updatedData);\n                alert('Description mise à jour avec succès !');\n                this.metaData.details = this.updatedDescription; // Mettre à jour localement après la réussite de l'update\n                this.updateModalInstance.hide(); // Fermer le modal après mise à jour\n            } catch (error) {\n                console.error('Erreur lors de la mise à jour des données:', error);\n            }\n        },\n        \n        // Gestion de la suppression par ID\n        async handleDelete() {\n            if (confirm('Voulez-vous vraiment supprimer cette information ?')) {\n                try {\n                    // Utiliser l'ID pour la suppression\n                    await deleteData(`/information/delete_information/${this.metaData.id}`);\n                    alert('Données supprimées avec succès !');\n                    this.metaData = null; // Réinitialiser les données après suppression\n                } catch (error) {\n                    console.error('Erreur lors de la suppression des données:', error);\n                }\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.card {\n    border-radius: 15px;\n}\n.card-header {\n    background-color: #022D7E;\n    color: white;\n}\nbutton {\n    background-color: #28aabb;\n    color: white;\n}\n</style>\n"],"mappings":"AA0CA,SAASA,SAAS,EAAEC,OAAO,EAAEC,UAAS,QAAS,sBAAsB;AACrE,OAAO,KAAKC,SAAQ,MAAO,WAAW;AAEtC,eAAe;EACXC,IAAI,EAAE,sBAAsB;EAC5BC,KAAK,EAAE;IACHC,KAAK,EAAE;MACHC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,IAAI;MACdC,kBAAkB,EAAE,EAAE;MACtBC,mBAAmB,EAAE;IACzB,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACjC,CAAC;EACDC,OAAO,EAAE;IACL;IACA,MAAMD,sBAAsBA,CAAA,EAAG;MAC3B,IAAI;QACA,MAAME,QAAO,GAAI,MAAMjB,SAAS,CAAC,uBAAuBkB,kBAAkB,CAAC,IAAI,CAACZ,KAAK,CAAC,EAAE,CAAC;QACzF,IAAIW,QAAQ,EAAE;UACV,IAAI,CAACN,QAAO,GAAIM,QAAQ;UACxB,IAAI,CAACL,kBAAiB,GAAI,IAAI,CAACD,QAAQ,CAACQ,OAAO,EAAE;QACrD;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACvE;IACJ,CAAC;IAED;IACAE,eAAeA,CAAA,EAAG;MACd,MAAMC,YAAW,GAAIC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;MAC3D,IAAI,CAACZ,mBAAkB,GAAI,IAAIV,SAAS,CAACuB,KAAK,CAACH,YAAY,CAAC;MAC5D,IAAI,CAACV,mBAAmB,CAACc,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;IACA,MAAMC,YAAYA,CAAA,EAAG;MACjB,IAAI;QACA,MAAMC,WAAU,GAAI;UAChBV,OAAO,EAAE,IAAI,CAACP;QAClB,CAAC;QACD;QACA,MAAMX,OAAO,CAAC,mCAAmC,IAAI,CAACU,QAAQ,CAACmB,EAAE,EAAE,EAAED,WAAW,CAAC;QACjFE,KAAK,CAAC,uCAAuC,CAAC;QAC9C,IAAI,CAACpB,QAAQ,CAACQ,OAAM,GAAI,IAAI,CAACP,kBAAkB,EAAE;QACjD,IAAI,CAACC,mBAAmB,CAACmB,IAAI,CAAC,CAAC,EAAE;MACrC,EAAE,OAAOZ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACtE;IACJ,CAAC;IAED;IACA,MAAMa,YAAYA,CAAA,EAAG;MACjB,IAAIC,OAAO,CAAC,oDAAoD,CAAC,EAAE;QAC/D,IAAI;UACA;UACA,MAAMhC,UAAU,CAAC,mCAAmC,IAAI,CAACS,QAAQ,CAACmB,EAAE,EAAE,CAAC;UACvEC,KAAK,CAAC,kCAAkC,CAAC;UACzC,IAAI,CAACpB,QAAO,GAAI,IAAI,EAAE;QAC1B,EAAE,OAAOS,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;QACtE;MACJ;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}