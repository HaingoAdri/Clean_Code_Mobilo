{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card\"\n};\nconst _hoisted_2 = {\n  class: \"card-body\"\n};\nconst _hoisted_3 = {\n  ref: \"quillEditorIntroduction\",\n  class: \"quill-editor\",\n  style: {\n    \"height\": \"200px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h5\", null, \"Introduction\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3"],"sources":["/Users/stagiaire_mobilosoft/Documents/mobilosoft_back_office/src/components/information_menu/EditeurQuill.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n            <div class=\"card-header\">\n              <h5>Introduction</h5>\n            </div>\n            <div class=\"card-body\">\n              <div ref=\"quillEditorIntroduction\" class=\"quill-editor\" style=\"height: 200px;\"></div>\n            </div>\n          </div>\n        \n</template>\n\n<script>\nimport Quill from 'quill';\nimport axios from 'axios';\nimport 'quill/dist/quill.snow.css';\n\nexport default {\n  name: 'TextEditor',\n  data() {\n    return {\n      quillIntroduction: null,\n      quillGettingStarted: null,\n      quillEnvironments: null,\n      quillFirstStep: null,\n      quillErrorCodes: null,\n      editorContent: {\n      },\n      savedContent: '',\n      savedDate: '',\n      alertMessage: '',\n      alertClass: ''\n    };\n  },\n  methods: {\n    updateContent(section) {\n      const quillInstance = this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`];\n      if (quillInstance) {\n        this.editorContent[section] = quillInstance.root.innerHTML;\n      }\n    },\n    async saveContent() {\n      // Crée le contenu formaté à sauvegarder\n      const formattedContent = [\n        { types: \"Introduction\", description: this.quillIntroduction.root.innerHTML },\n        { types: \"GettingStarted\", description: this.quillGettingStarted.root.innerHTML },\n        { types: \"Environments\", description: this.quillEnvironments.root.innerHTML },\n        { types: \"FirstStep\", description: this.quillFirstStep.root.innerHTML },\n        { types: \"ErrorCodes\", description: this.quillErrorCodes.root.innerHTML }\n      ];\n      this.savedContent = JSON.stringify(formattedContent, null, 2);\n      this.savedDate = new Date().toLocaleString();\n      console.log(this.savedContent);\n\n      try {\n        await axios.post('http://localhost:8085/api/text/save', this.savedContent, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        this.alertMessage = 'Text saved successfully!';\n        this.alertClass = 'alert-success';\n      } catch (error) {\n        console.error('Error saving text:', error);\n        this.alertMessage = 'Error saving text.';\n        this.alertClass = 'alert-danger';\n      }\n      setTimeout(() => {\n        this.alertMessage = '';\n      }, 3000);\n    },\n    async loadContent() {\n      try {\n        const response = await axios.get('http://localhost:8085/api/text/get');\n        this.editorContent = response.data;\n        this.savedContent = JSON.stringify(this.editorContent, null, 2);\n        this.savedDate = new Date().toLocaleString();\n      } catch (error) {\n        console.error('Error loading text:', error);\n      }\n    },\n  },\n  mounted() {\n    const sections = ['Introduction', 'GettingStarted', 'Environments', 'FirstStep', 'ErrorCodes'];\n    sections.forEach(section => {\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`] = new Quill(this.$refs[`quillEditor${section}`], {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ font: [] }],\n            [{ align: [] }],\n            ['bold', 'italic', 'underline', 'strike'],\n            [{ color: [] }, { background: [] }],\n            [{ script: 'sub' }, { script: 'super' }],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ direction: 'rtl' }],\n            ['link', 'image', 'video'],\n            ['blockquote', 'code-block'],\n            ['clean'], // remove formatting button\n          ],\n          table: true, // Enable table module\n        },\n      });\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`].on('text-change', () => this.updateContent(section));\n      this.loadContent()\n    });\n  },\n};\n</script>\n\n<style scoped>\n.app-container {\n  display: flex;\n}\n\n.main-content {\n  margin-left: 280px;\n  padding: 20px;\n  height: 100vh;\n  width: 500vh;\n  overflow-y: scroll;\n}\n\n.editor-container {\n  padding: 10px;\n  color: #333;\n}\n.card-header {\n  background-color: #f7f7f7;\n}\n.btn-blues,\n.btn-blues:hover {\n  background-color: #022D7E;\n  color: white;\n}\nsmall {\n  font-size: 10px;\n}\n\n/* Styles pour les tableaux dans l'éditeur Quill */\n.quill-editor .ql-editor table {\n  border-collapse: collapse;\n  width: 100%;\n}\nul {\n  list-style-type: disc;\n  margin-left: 20px;\n}\np {\n  line-height: 1.6;\n}\n\n/* Styles pour les alertes */\n.alert {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  width: auto;\n  z-index: 1000;\n}\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n  border-color: #c3e6cb;\n}\n.alert-danger {\n  background-color: #f8d7da;\n  color: #721c24;\n  border-color: #f5c6cb;\n}\n</style>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAIJA,KAAK,EAAC;AAAW;;EACfC,GAAG,EAAC,yBAAyB;EAACD,KAAK,EAAC,cAAc;EAACE,KAAsB,EAAtB;IAAA;EAAA;;;uBALlEC,mBAAA,CAOY,OAPZC,UAOY,G,0BANJC,mBAAA,CAEM;IAFDL,KAAK,EAAC;EAAa,IACtBK,mBAAA,CAAqB,YAAjB,cAAY,E,sBAElBA,mBAAA,CAEM,OAFNC,UAEM,GADJD,mBAAA,CAAqF,OAArFE,UAAqF,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}