{"ast":null,"code":"import Quill from 'quill';\nimport axios from 'axios';\nimport 'quill/dist/quill.snow.css';\nexport default {\n  name: 'TextEditor',\n  data() {\n    return {\n      quillIntroduction: null,\n      quillGettingStarted: null,\n      quillEnvironments: null,\n      quillFirstStep: null,\n      quillErrorCodes: null,\n      editorContent: {},\n      savedContent: '',\n      savedDate: '',\n      alertMessage: '',\n      alertClass: ''\n    };\n  },\n  methods: {\n    updateContent(section) {\n      const quillInstance = this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`];\n      if (quillInstance) {\n        this.editorContent[section] = quillInstance.root.innerHTML;\n      }\n    },\n    async saveContent() {\n      // Crée le contenu formaté à sauvegarder\n      const formattedContent = [{\n        types: \"Introduction\",\n        description: this.quillIntroduction.root.innerHTML\n      }, {\n        types: \"GettingStarted\",\n        description: this.quillGettingStarted.root.innerHTML\n      }, {\n        types: \"Environments\",\n        description: this.quillEnvironments.root.innerHTML\n      }, {\n        types: \"FirstStep\",\n        description: this.quillFirstStep.root.innerHTML\n      }, {\n        types: \"ErrorCodes\",\n        description: this.quillErrorCodes.root.innerHTML\n      }];\n      this.savedContent = JSON.stringify(formattedContent, null, 2);\n      this.savedDate = new Date().toLocaleString();\n      console.log(this.savedContent);\n      try {\n        await axios.post('http://localhost:8085/api/text/save', this.savedContent, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        this.alertMessage = 'Text saved successfully!';\n        this.alertClass = 'alert-success';\n      } catch (error) {\n        console.error('Error saving text:', error);\n        this.alertMessage = 'Error saving text.';\n        this.alertClass = 'alert-danger';\n      }\n      setTimeout(() => {\n        this.alertMessage = '';\n      }, 3000);\n    },\n    async loadContent() {\n      try {\n        const response = await axios.get('http://localhost:8085/api/text/get');\n        this.editorContent = response.data;\n        this.savedContent = JSON.stringify(this.editorContent, null, 2);\n        this.savedDate = new Date().toLocaleString();\n      } catch (error) {\n        console.error('Error loading text:', error);\n      }\n    }\n  },\n  mounted() {\n    const sections = ['Introduction', 'GettingStarted', 'Environments', 'FirstStep', 'ErrorCodes'];\n    sections.forEach(section => {\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`] = new Quill(this.$refs[`quillEditor${section}`], {\n        theme: 'snow',\n        modules: {\n          toolbar: [[{\n            header: [1, 2, 3, 4, 5, 6, false]\n          }], [{\n            font: []\n          }], [{\n            align: []\n          }], ['bold', 'italic', 'underline', 'strike'], [{\n            color: []\n          }, {\n            background: []\n          }], [{\n            script: 'sub'\n          }, {\n            script: 'super'\n          }], [{\n            list: 'ordered'\n          }, {\n            list: 'bullet'\n          }], [{\n            indent: '-1'\n          }, {\n            indent: '+1'\n          }], [{\n            direction: 'rtl'\n          }], ['link', 'image', 'video'], ['blockquote', 'code-block'], ['clean'] // remove formatting button\n          ],\n          table: true // Enable table module\n        }\n      });\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`].on('text-change', () => this.updateContent(section));\n      this.loadContent();\n    });\n  }\n};","map":{"version":3,"names":["Quill","axios","name","data","quillIntroduction","quillGettingStarted","quillEnvironments","quillFirstStep","quillErrorCodes","editorContent","savedContent","savedDate","alertMessage","alertClass","methods","updateContent","section","quillInstance","charAt","toUpperCase","slice","root","innerHTML","saveContent","formattedContent","types","description","JSON","stringify","Date","toLocaleString","console","log","post","headers","error","setTimeout","loadContent","response","get","mounted","sections","forEach","$refs","theme","modules","toolbar","header","font","align","color","background","script","list","indent","direction","table","on"],"sources":["/Users/stagiaire_mobilosoft/Documents/mobilosoft_back_office/src/components/information_menu/EditeurQuill.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n            <div class=\"card-header\">\n              <h5>Introduction</h5>\n            </div>\n            <div class=\"card-body\">\n              <div ref=\"quillEditorIntroduction\" class=\"quill-editor\" style=\"height: 200px;\"></div>\n            </div>\n          </div>\n\n</template>\n\n<script>\nimport Quill from 'quill';\nimport axios from 'axios';\nimport 'quill/dist/quill.snow.css';\n\nexport default {\n  name: 'TextEditor',\n  data() {\n    return {\n      quillIntroduction: null,\n      quillGettingStarted: null,\n      quillEnvironments: null,\n      quillFirstStep: null,\n      quillErrorCodes: null,\n      editorContent: {\n      },\n      savedContent: '',\n      savedDate: '',\n      alertMessage: '',\n      alertClass: ''\n    };\n  },\n  methods: {\n    updateContent(section) {\n      const quillInstance = this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`];\n      if (quillInstance) {\n        this.editorContent[section] = quillInstance.root.innerHTML;\n      }\n    },\n    async saveContent() {\n      // Crée le contenu formaté à sauvegarder\n      const formattedContent = [\n        { types: \"Introduction\", description: this.quillIntroduction.root.innerHTML },\n        { types: \"GettingStarted\", description: this.quillGettingStarted.root.innerHTML },\n        { types: \"Environments\", description: this.quillEnvironments.root.innerHTML },\n        { types: \"FirstStep\", description: this.quillFirstStep.root.innerHTML },\n        { types: \"ErrorCodes\", description: this.quillErrorCodes.root.innerHTML }\n      ];\n      this.savedContent = JSON.stringify(formattedContent, null, 2);\n      this.savedDate = new Date().toLocaleString();\n      console.log(this.savedContent);\n\n      try {\n        await axios.post('http://localhost:8085/api/text/save', this.savedContent, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        this.alertMessage = 'Text saved successfully!';\n        this.alertClass = 'alert-success';\n      } catch (error) {\n        console.error('Error saving text:', error);\n        this.alertMessage = 'Error saving text.';\n        this.alertClass = 'alert-danger';\n      }\n      setTimeout(() => {\n        this.alertMessage = '';\n      }, 3000);\n    },\n    async loadContent() {\n      try {\n        const response = await axios.get('http://localhost:8085/api/text/get');\n        this.editorContent = response.data;\n        this.savedContent = JSON.stringify(this.editorContent, null, 2);\n        this.savedDate = new Date().toLocaleString();\n      } catch (error) {\n        console.error('Error loading text:', error);\n      }\n    },\n  },\n  mounted() {\n    const sections = ['Introduction', 'GettingStarted', 'Environments', 'FirstStep', 'ErrorCodes'];\n    sections.forEach(section => {\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`] = new Quill(this.$refs[`quillEditor${section}`], {\n        theme: 'snow',\n        modules: {\n          toolbar: [\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [{ font: [] }],\n            [{ align: [] }],\n            ['bold', 'italic', 'underline', 'strike'],\n            [{ color: [] }, { background: [] }],\n            [{ script: 'sub' }, { script: 'super' }],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ direction: 'rtl' }],\n            ['link', 'image', 'video'],\n            ['blockquote', 'code-block'],\n            ['clean'], // remove formatting button\n          ],\n          table: true, // Enable table module\n        },\n      });\n      this[`quill${section.charAt(0).toUpperCase() + section.slice(1)}`].on('text-change', () => this.updateContent(section));\n      this.loadContent()\n    });\n  },\n};\n</script>\n\n<style scoped>\n.app-container {\n  display: flex;\n}\n\n.main-content {\n  margin-left: 280px;\n  padding: 20px;\n  height: 100vh;\n  width: 500vh;\n  overflow-y: scroll;\n}\n\n.editor-container {\n  padding: 10px;\n  color: #333;\n}\n.card-header {\n  background-color: #f7f7f7;\n}\n.btn-blues,\n.btn-blues:hover {\n  background-color: #022D7E;\n  color: white;\n}\nsmall {\n  font-size: 10px;\n}\n\n/* Styles pour les tableaux dans l'éditeur Quill */\n.quill-editor .ql-editor table {\n  border-collapse: collapse;\n  width: 100%;\n}\nul {\n  list-style-type: disc;\n  margin-left: 20px;\n}\np {\n  line-height: 1.6;\n}\n\n/* Styles pour les alertes */\n.alert {\n  position: absolute;\n  right: 10px;\n  top: 10px;\n  width: auto;\n  z-index: 1000;\n}\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n  border-color: #c3e6cb;\n}\n.alert-danger {\n  background-color: #f8d7da;\n  color: #721c24;\n  border-color: #f5c6cb;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}