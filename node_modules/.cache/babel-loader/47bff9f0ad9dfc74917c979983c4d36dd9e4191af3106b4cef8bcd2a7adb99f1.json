{"ast":null,"code":"import { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'BodyResponse_vue',\n  data() {\n    return {\n      bodies: [],\n      updatedBody: {},\n      updateModalInstance: null,\n      information: []\n    };\n  },\n  mounted() {\n    this.fetchBodies();\n    this.fetchSearchInformation();\n  },\n  methods: {\n    async fetchBodies() {\n      try {\n        const response = await fetchData(`/body/allBody_view`);\n        if (response) {\n          this.bodies = response;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des bodies:', error);\n      }\n    },\n    openUpdateModal(body) {\n      this.updatedBody = {\n        id: body[0],\n        nom: body[1],\n        types: body[2],\n        details: body[3],\n        sous_categorie: body[4]\n      };\n      const modalElement = document.getElementById('updateModal');\n      this.updateModalInstance = new bootstrap.Modal(modalElement);\n      this.updateModalInstance.show();\n    },\n    async handleUpdate() {\n      try {\n        const response = await putData(`/body/update_body/${this.updatedBody.id}`, this.updatedBody);\n        if (response) {\n          alert('Body mis à jour avec succès !');\n          this.fetchBodies();\n          this.updateModalInstance.hide();\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour:', error);\n      }\n    },\n    async handleDelete(id) {\n      if (confirm('Voulez-vous vraiment supprimer ce body ?')) {\n        try {\n          await deleteData(`/body/delete_body/${id}`);\n          alert('Body supprimé avec succès !');\n          this.fetchBodies();\n        } catch (error) {\n          console.error('Erreur lors de la suppression:', error);\n        }\n      }\n    },\n    async fetchSearchInformation() {\n      try {\n        const response = await fetchData(`/sous_categorie/allSous_categorie`);\n        if (response) {\n          this.information = response;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchData","putData","deleteData","bootstrap","name","data","bodies","updatedBody","updateModalInstance","information","mounted","fetchBodies","fetchSearchInformation","methods","response","error","console","openUpdateModal","body","id","nom","types","details","sous_categorie","modalElement","document","getElementById","Modal","show","handleUpdate","alert","hide","handleDelete","confirm"],"sources":["/Users/eva_smartelia/Documents/Clean_Code_Mobilo/src/components/endpoints_menu/reponse/Body_reponse.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- Card displaying the body response list -->\n        <div class=\"card mb-4\">\n            <div class=\"card-header rounded-bottom rounded-4\">\n                <h3 class=\"py-2\">Corps des sous-catégorie liste (Body)</h3>\n            </div>\n            <div class=\"card-body\">\n                <blockquote class=\"blockquote mb-0\">\n                    <table class=\"table table-bordered\">\n                        <thead>\n                            <tr>\n                                <th>Sous-catégorie</th>\n                                <th>Nom</th>\n                                <th>Types</th>\n                                <th>Description</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr v-for=\"body in bodies\" :key=\"body[0]\">\n                                <td>{{ body[1] }}</td>\n                                <td>{{ body[2] }}</td>\n                                <td>{{ body[3] }}</td>\n                                <td>{{ body[4] }}</td>\n                                <td>\n                                    <button class=\"btn m-2\" @click=\"openUpdateModal(body)\">\n                                        <i class=\"bi bi-pen-fill\"></i>\n                                    </button>\n                                    <button class=\"btn\" @click=\"handleDelete(body[0])\">\n                                        <i class=\"bi bi-file-earmark-x-fill\"></i>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </blockquote>\n            </div>\n        </div>\n\n        <!-- Modal for updating body data -->\n        <div class=\"modal fade\" id=\"updateModal\" tabindex=\"-1\" aria-labelledby=\"updateModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"updateModalLabel\">Mise à jour du Body</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form @submit.prevent=\"handleUpdate\">\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">Nom :</label>\n                                <input type=\"text\" class=\"form-control\" v-model=\"updatedBody.nom\" required />\n                            </div>\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">Types :</label>\n                                <input type=\"text\" class=\"form-control\" v-model=\"updatedBody.types\" required />\n                            </div>\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">Description :</label>\n                                <textarea class=\"form-control\" v-model=\"updatedBody.description\" required></textarea>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">Sous-catégorie :</label>\n                                <select class=\"form-control\" v-model=\"updatedBody.sous_categorie\" required>\n                                    <option v-for=\"item in information\" :key=\"item.id\" :value=\"item.id\">{{ item.nom }}</option>\n                                </select>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">Mettre à jour</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\n\nexport default {\n    name: 'BodyResponse_vue',\n    data() {\n        return {\n            bodies: [],\n            updatedBody: {},\n            updateModalInstance: null,\n            information: [],\n        };\n    },\n    mounted() {\n        this.fetchBodies();\n        this.fetchSearchInformation();\n    },\n    methods: {\n        async fetchBodies() {\n            try {\n                const response = await fetchData(`/body/allBody_view`);\n                if (response) {\n                    this.bodies = response;\n                }\n            } catch (error) {\n                console.error('Erreur lors de la récupération des bodies:', error);\n            }\n        },\n\n        openUpdateModal(body) {\n            this.updatedBody = {\n                id: body[0],\n                nom: body[1],\n                types: body[2],\n                details: body[3],\n                sous_categorie: body[4]\n            };\n            const modalElement = document.getElementById('updateModal');\n            this.updateModalInstance = new bootstrap.Modal(modalElement);\n            this.updateModalInstance.show();\n        },\n\n        async handleUpdate() {\n            try {\n                const response = await putData(`/body/update_body/${this.updatedBody.id}`, this.updatedBody);\n                if (response) {\n                    alert('Body mis à jour avec succès !');\n                    this.fetchBodies();\n                    this.updateModalInstance.hide();\n                }\n            } catch (error) {\n                console.error('Erreur lors de la mise à jour:', error);\n            }\n        },\n\n        async handleDelete(id) {\n            if (confirm('Voulez-vous vraiment supprimer ce body ?')) {\n                try {\n                    await deleteData(`/body/delete_body/${id}`);\n                    alert('Body supprimé avec succès !');\n                    this.fetchBodies();\n                } catch (error) {\n                    console.error('Erreur lors de la suppression:', error);\n                }\n            }\n        },\n\n        async fetchSearchInformation() {\n            try {\n                const response = await fetchData(`/sous_categorie/allSous_categorie`);\n                if (response) {\n                    this.information = response;\n                }\n            } catch (error) {\n                console.error('Erreur lors de la récupération des données:', error);\n            }\n        },\n    }\n}\n</script>\n\n<style scoped>\n.card {\n    border-radius: 15px;\n}\n.card-header {\n    background-color: #022D7E;\n    color: white;\n}\nbutton {\n    background-color: #28aabb;\n    color: white;\n}\n</style>\n"],"mappings":"AA8EA,SAASA,SAAS,EAAEC,OAAO,EAAEC,UAAS,QAAS,sBAAsB;AACrE,OAAO,KAAKC,SAAQ,MAAO,WAAW;AAEtC,eAAe;EACXC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,CAAC,CAAC;MACfC,mBAAmB,EAAE,IAAI;MACzBC,WAAW,EAAE;IACjB,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACjC,CAAC;EACDC,OAAO,EAAE;IACL,MAAMF,WAAWA,CAAA,EAAG;MAChB,IAAI;QACA,MAAMG,QAAO,GAAI,MAAMd,SAAS,CAAC,oBAAoB,CAAC;QACtD,IAAIc,QAAQ,EAAE;UACV,IAAI,CAACR,MAAK,GAAIQ,QAAQ;QAC1B;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACtE;IACJ,CAAC;IAEDE,eAAeA,CAACC,IAAI,EAAE;MAClB,IAAI,CAACX,WAAU,GAAI;QACfY,EAAE,EAAED,IAAI,CAAC,CAAC,CAAC;QACXE,GAAG,EAAEF,IAAI,CAAC,CAAC,CAAC;QACZG,KAAK,EAAEH,IAAI,CAAC,CAAC,CAAC;QACdI,OAAO,EAAEJ,IAAI,CAAC,CAAC,CAAC;QAChBK,cAAc,EAAEL,IAAI,CAAC,CAAC;MAC1B,CAAC;MACD,MAAMM,YAAW,GAAIC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;MAC3D,IAAI,CAAClB,mBAAkB,GAAI,IAAIL,SAAS,CAACwB,KAAK,CAACH,YAAY,CAAC;MAC5D,IAAI,CAAChB,mBAAmB,CAACoB,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,MAAMC,YAAYA,CAAA,EAAG;MACjB,IAAI;QACA,MAAMf,QAAO,GAAI,MAAMb,OAAO,CAAC,qBAAqB,IAAI,CAACM,WAAW,CAACY,EAAE,EAAE,EAAE,IAAI,CAACZ,WAAW,CAAC;QAC5F,IAAIO,QAAQ,EAAE;UACVgB,KAAK,CAAC,+BAA+B,CAAC;UACtC,IAAI,CAACnB,WAAW,CAAC,CAAC;UAClB,IAAI,CAACH,mBAAmB,CAACuB,IAAI,CAAC,CAAC;QACnC;MACJ,EAAE,OAAOhB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IAED,MAAMiB,YAAYA,CAACb,EAAE,EAAE;MACnB,IAAIc,OAAO,CAAC,0CAA0C,CAAC,EAAE;QACrD,IAAI;UACA,MAAM/B,UAAU,CAAC,qBAAqBiB,EAAE,EAAE,CAAC;UAC3CW,KAAK,CAAC,6BAA6B,CAAC;UACpC,IAAI,CAACnB,WAAW,CAAC,CAAC;QACtB,EAAE,OAAOI,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QAC1D;MACJ;IACJ,CAAC;IAED,MAAMH,sBAAsBA,CAAA,EAAG;MAC3B,IAAI;QACA,MAAME,QAAO,GAAI,MAAMd,SAAS,CAAC,mCAAmC,CAAC;QACrE,IAAIc,QAAQ,EAAE;UACV,IAAI,CAACL,WAAU,GAAIK,QAAQ;QAC/B;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACvE;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}