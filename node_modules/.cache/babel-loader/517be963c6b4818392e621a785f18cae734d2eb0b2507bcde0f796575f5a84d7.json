{"ast":null,"code":"import { fetchData, postData } from '@/service/apiService'; // Vous devez aussi avoir une fonction postData pour l'update\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'Meta_descriptionReponse',\n  props: {\n    types: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      metaData: null,\n      updatedDescription: ''\n    };\n  },\n  mounted() {\n    this.fetchMetaDescription();\n  },\n  methods: {\n    async fetchMetaDescription() {\n      try {\n        const response = await fetchData(`/configuration/search?name=${encodeURIComponent(this.types)}`);\n        if (response) {\n          this.metaData = response;\n          this.updatedDescription = this.metaData.description; // Préremplir le modal avec la méta description actuelle\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    },\n    showUpdateModal() {\n      const updateModal = new bootstrap.Modal(document.getElementById('updateModal')); // Initialiser le modal\n      updateModal.show();\n    },\n    async updateMetaDescription() {\n      try {\n        await postData(`/configuration/update_configuration/meta title`, {\n          description: this.updatedDescription\n        });\n        window.alert('Mise à jour réussie');\n        this.fetchMetaDescription(); // Rafraîchir les données après la mise à jour\n        const updateModal = bootstrap.Modal.getInstance(document.getElementById('updateModal'));\n        updateModal.hide(); // Fermer le modal après la mise à jour\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour:', error);\n        window.alert('Échec de la mise à jour');\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchData","postData","bootstrap","name","props","types","type","String","required","data","metaData","updatedDescription","mounted","fetchMetaDescription","methods","response","encodeURIComponent","description","error","console","showUpdateModal","updateModal","Modal","document","getElementById","show","updateMetaDescription","window","alert","getInstance","hide"],"sources":["/Users/stagiaire_mobilosoft/Documents/Clean_Code_Mobilo/src/components/configuration_reponse/Meta_descriptionReponse.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n        <div class=\"card-header rounded-bottom rounded-4 d-flex justify-content-between\">\n            <h3 class=\"py-2\">Meta description actuelle</h3>\n            <div class=\"a\">\n                <!-- Bouton de mise à jour qui déclenche le modal -->\n                <button class=\"btn m-2\" @click=\"showUpdateModal\"><i class=\"bi bi-pen-fill\"></i></button>\n                <button class=\"btn\"><i class=\"bi bi-file-earmark-x-fill\"></i></button>\n            </div>\n        </div>\n        <div class=\"card-body\">\n            <blockquote class=\"blockquote mb-0\">\n                <p v-if=\"metaData\">{{ metaData.description }}</p>\n                <p v-else>Aucune description disponible pour ce type.</p>\n            </blockquote>\n        </div>\n\n        <!-- Modal de mise à jour -->\n        <div class=\"modal fade\" id=\"updateModal\" tabindex=\"-1\" aria-labelledby=\"updateModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"updateModalLabel\">Modifier la méta description</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form @submit.prevent=\"updateMetaDescription\">\n                            <div class=\"mb-3\">\n                                <label for=\"metaDescription\" class=\"form-label\">Méta description</label>\n                                <textarea v-model=\"updatedDescription\" class=\"form-control\" id=\"metaDescription\" rows=\"3\"></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">Enregistrer</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchData, postData } from '@/service/apiService'; // Vous devez aussi avoir une fonction postData pour l'update\nimport * as bootstrap from 'bootstrap';\nexport default {\n    name: 'Meta_descriptionReponse',\n    props: {\n        types: {\n            type: String,\n            required: true\n        }\n    },\n    data() {\n        return {\n            metaData: null,\n            updatedDescription: ''\n        };\n    },\n    mounted() {\n        this.fetchMetaDescription();\n    },\n    methods: {\n        async fetchMetaDescription() {\n            try {\n                const response = await fetchData(`/configuration/search?name=${encodeURIComponent(this.types)}`);\n                if (response) {\n                    this.metaData = response;\n                    this.updatedDescription = this.metaData.description; // Préremplir le modal avec la méta description actuelle\n                }\n            } catch (error) {\n                console.error('Erreur lors de la récupération des données:', error);\n            }\n        },\n        showUpdateModal() {\n            const updateModal = new bootstrap.Modal(document.getElementById('updateModal')); // Initialiser le modal\n            updateModal.show();\n        },\n        async updateMetaDescription() {\n            try {\n                await postData(`/configuration/update_configuration/meta title`, {\n                    description: this.updatedDescription\n                });\n                window.alert('Mise à jour réussie');\n                this.fetchMetaDescription(); // Rafraîchir les données après la mise à jour\n                const updateModal = bootstrap.Modal.getInstance(document.getElementById('updateModal'));\n                updateModal.hide(); // Fermer le modal après la mise à jour\n            } catch (error) {\n                console.error('Erreur lors de la mise à jour:', error);\n                window.alert('Échec de la mise à jour');\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.card {\n    border-radius: 15px;\n}\n.card-header {\n    background-color: #022D7E;\n    color: white;\n}\nbutton {\n    background-color: #28aabb;\n    color: white;\n}\n</style>\n"],"mappings":"AAyCA,SAASA,SAAS,EAAEC,QAAO,QAAS,sBAAsB,EAAE;AAC5D,OAAO,KAAKC,SAAQ,MAAO,WAAW;AACtC,eAAe;EACXC,IAAI,EAAE,yBAAyB;EAC/BC,KAAK,EAAE;IACHC,KAAK,EAAE;MACHC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,IAAI;MACdC,kBAAkB,EAAE;IACxB,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC/B,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,oBAAoBA,CAAA,EAAG;MACzB,IAAI;QACA,MAAME,QAAO,GAAI,MAAMf,SAAS,CAAC,8BAA8BgB,kBAAkB,CAAC,IAAI,CAACX,KAAK,CAAC,EAAE,CAAC;QAChG,IAAIU,QAAQ,EAAE;UACV,IAAI,CAACL,QAAO,GAAIK,QAAQ;UACxB,IAAI,CAACJ,kBAAiB,GAAI,IAAI,CAACD,QAAQ,CAACO,WAAW,EAAE;QACzD;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACvE;IACJ,CAAC;IACDE,eAAeA,CAAA,EAAG;MACd,MAAMC,WAAU,GAAI,IAAInB,SAAS,CAACoB,KAAK,CAACC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAAC,EAAE;MACjFH,WAAW,CAACI,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,MAAMC,qBAAqBA,CAAA,EAAG;MAC1B,IAAI;QACA,MAAMzB,QAAQ,CAAC,gDAAgD,EAAE;UAC7DgB,WAAW,EAAE,IAAI,CAACN;QACtB,CAAC,CAAC;QACFgB,MAAM,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACnC,IAAI,CAACf,oBAAoB,CAAC,CAAC,EAAE;QAC7B,MAAMQ,WAAU,GAAInB,SAAS,CAACoB,KAAK,CAACO,WAAW,CAACN,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAAC;QACvFH,WAAW,CAACS,IAAI,CAAC,CAAC,EAAE;MACxB,EAAE,OAAOZ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDS,MAAM,CAACC,KAAK,CAAC,yBAAyB,CAAC;MAC3C;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}