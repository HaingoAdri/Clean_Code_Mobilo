{"ast":null,"code":"import { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\nexport default {\n  name: 'Endpoints_categorie_vue',\n  data() {\n    return {\n      metaData: null,\n      // Liste des catégories\n      updatedDescription: '',\n      // Description à mettre à jour\n      selectedItem: null,\n      // Élément sélectionné pour la mise à jour\n      updateModalInstance: null // Instance du modal\n    };\n  },\n  mounted() {\n    this.fetchSearchInformation();\n  },\n  methods: {\n    async fetchSearchInformation() {\n      try {\n        const response = await fetchData(`/endpoints/allCategorie`);\n        if (response) {\n          this.metaData = response;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données:', error);\n      }\n    },\n    openUpdateModal(item) {\n      this.selectedItem = item;\n      this.updatedDescription = item.details;\n      const modalElement = document.getElementById('updateModal');\n      this.updateModalInstance = new bootstrap.Modal(modalElement);\n      this.updateModalInstance.show();\n    },\n    async handleUpdate() {\n      if (!this.selectedItem) return;\n      try {\n        const updatedData = {\n          details: this.updatedDescription\n        };\n        await putData(`/information/update_inforamtion/${this.selectedItem.id}`, updatedData);\n        alert('Description mise à jour avec succès !');\n        this.selectedItem.details = this.updatedDescription;\n        this.updateModalInstance.hide();\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour des données:', error);\n      }\n    },\n    async handleDelete(id) {\n      if (confirm('Voulez-vous vraiment supprimer cette information ?')) {\n        try {\n          await deleteData(`/endpoints/delete_information/${id}`);\n          alert('Données supprimées avec succès !');\n\n          // Supprimer l'élément localement après la suppression\n          this.metaData = this.metaData.filter(item => item.id !== id);\n        } catch (error) {\n          console.error('Erreur lors de la suppression des données:', error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchData","putData","deleteData","bootstrap","name","data","metaData","updatedDescription","selectedItem","updateModalInstance","mounted","fetchSearchInformation","methods","response","error","console","openUpdateModal","item","details","modalElement","document","getElementById","Modal","show","handleUpdate","updatedData","id","alert","hide","handleDelete","confirm","filter"],"sources":["/Users/eva_smartelia/Documents/Clean_Code_Mobilo/src/components/endpoints_menu/reponse/Endpoints_categorie_reponse.vue"],"sourcesContent":["<template>\n    <div class=\"card\">\n        <div class=\"card-header rounded-bottom rounded-4\">\n            <h3 class=\"py-2\">Endpoints categorie liste</h3>\n        </div>\n        <div class=\"card-body\">\n            <blockquote class=\"blockquote mb-0\">\n                <table class=\"table table-bordered\">\n                    <thead>\n                        <th>Nom</th>\n                        <th>Description</th>\n                        <th>Action</th>\n                    </thead>\n                    <tbody>\n                        <tr v-for=\"item in metaData\" :key=\"item.id\">\n                            <td>{{ item.nom }}</td>\n                            <td>{{ item.details }}</td>\n                            <td>\n                                <!-- Bouton pour la mise à jour -->\n                                <button class=\"btn m-2\" @click=\"openUpdateModal(item)\"><i class=\"bi bi-pen-fill\"></i></button>\n                                <!-- Bouton pour la suppression -->\n                                <button class=\"btn\" @click=\"handleDelete(item.id)\"><i class=\"bi bi-file-earmark-x-fill\"></i></button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </blockquote>\n        </div>\n\n        <!-- Modal pour la mise à jour de la description -->\n        <div class=\"modal fade\" id=\"updateModal\" tabindex=\"-1\" aria-labelledby=\"updateModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\" id=\"updateModalLabel\">Mise à jour de la description</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form @submit.prevent=\"handleUpdate\">\n                            <div class=\"mb-3\">\n                                <label for=\"description\" class=\"form-label\">Description :</label>\n                                <textarea v-model=\"updatedDescription\" class=\"form-control\" id=\"description\" rows=\"3\"></textarea>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">Mettre à jour</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchData, putData, deleteData } from '@/service/apiService';\nimport * as bootstrap from 'bootstrap';\n\nexport default {\n    name: 'Endpoints_categorie_vue',\n    data() {\n        return {\n            metaData: null, // Liste des catégories\n            updatedDescription: '', // Description à mettre à jour\n            selectedItem: null, // Élément sélectionné pour la mise à jour\n            updateModalInstance: null, // Instance du modal\n        };\n    },\n    mounted() {\n        this.fetchSearchInformation();\n    },\n    methods: {\n        async fetchSearchInformation() {\n            try {\n                const response = await fetchData(`/endpoints/allCategorie`);\n                if (response) {\n                    this.metaData = response;\n                }\n            } catch (error) {\n                console.error('Erreur lors de la récupération des données:', error);\n            }\n        },\n        \n        openUpdateModal(item) {\n            this.selectedItem = item;\n            this.updatedDescription = item.details;\n            const modalElement = document.getElementById('updateModal');\n            this.updateModalInstance = new bootstrap.Modal(modalElement);\n            this.updateModalInstance.show();\n        },\n        \n        async handleUpdate() {\n            if (!this.selectedItem) return;\n            try {\n                const updatedData = {\n                    details: this.updatedDescription\n                };\n                await putData(`/information/update_inforamtion/${this.selectedItem.id}`, updatedData);\n                alert('Description mise à jour avec succès !');\n                \n                this.selectedItem.details = this.updatedDescription;\n                this.updateModalInstance.hide();\n            } catch (error) {\n                console.error('Erreur lors de la mise à jour des données:', error);\n            }\n        },\n        \n        async handleDelete(id) {\n            if (confirm('Voulez-vous vraiment supprimer cette information ?')) {\n                try {\n                    await deleteData(`/endpoints/delete_information/${id}`);\n                    alert('Données supprimées avec succès !');\n                    \n                    // Supprimer l'élément localement après la suppression\n                    this.metaData = this.metaData.filter(item => item.id !== id);\n                } catch (error) {\n                    console.error('Erreur lors de la suppression des données:', error);\n                }\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.card {\n    border-radius: 15px;\n}\n.card-header {\n    background-color: #022D7E;\n    color: white;\n}\nbutton {\n    background-color: #28aabb;\n    color: white;\n}\n</style>\n"],"mappings":"AAqDA,SAASA,SAAS,EAAEC,OAAO,EAAEC,UAAS,QAAS,sBAAsB;AACrE,OAAO,KAAKC,SAAQ,MAAO,WAAW;AAEtC,eAAe;EACXC,IAAI,EAAE,yBAAyB;EAC/BC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,IAAI;MAAE;MAChBC,kBAAkB,EAAE,EAAE;MAAE;MACxBC,YAAY,EAAE,IAAI;MAAE;MACpBC,mBAAmB,EAAE,IAAI,CAAE;IAC/B,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,sBAAsB,CAAC,CAAC;EACjC,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,sBAAsBA,CAAA,EAAG;MAC3B,IAAI;QACA,MAAME,QAAO,GAAI,MAAMb,SAAS,CAAC,yBAAyB,CAAC;QAC3D,IAAIa,QAAQ,EAAE;UACV,IAAI,CAACP,QAAO,GAAIO,QAAQ;QAC5B;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACvE;IACJ,CAAC;IAEDE,eAAeA,CAACC,IAAI,EAAE;MAClB,IAAI,CAACT,YAAW,GAAIS,IAAI;MACxB,IAAI,CAACV,kBAAiB,GAAIU,IAAI,CAACC,OAAO;MACtC,MAAMC,YAAW,GAAIC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;MAC3D,IAAI,CAACZ,mBAAkB,GAAI,IAAIN,SAAS,CAACmB,KAAK,CAACH,YAAY,CAAC;MAC5D,IAAI,CAACV,mBAAmB,CAACc,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,MAAMC,YAAYA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAAChB,YAAY,EAAE;MACxB,IAAI;QACA,MAAMiB,WAAU,GAAI;UAChBP,OAAO,EAAE,IAAI,CAACX;QAClB,CAAC;QACD,MAAMN,OAAO,CAAC,mCAAmC,IAAI,CAACO,YAAY,CAACkB,EAAE,EAAE,EAAED,WAAW,CAAC;QACrFE,KAAK,CAAC,uCAAuC,CAAC;QAE9C,IAAI,CAACnB,YAAY,CAACU,OAAM,GAAI,IAAI,CAACX,kBAAkB;QACnD,IAAI,CAACE,mBAAmB,CAACmB,IAAI,CAAC,CAAC;MACnC,EAAE,OAAOd,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MACtE;IACJ,CAAC;IAED,MAAMe,YAAYA,CAACH,EAAE,EAAE;MACnB,IAAII,OAAO,CAAC,oDAAoD,CAAC,EAAE;QAC/D,IAAI;UACA,MAAM5B,UAAU,CAAC,iCAAiCwB,EAAE,EAAE,CAAC;UACvDC,KAAK,CAAC,kCAAkC,CAAC;;UAEzC;UACA,IAAI,CAACrB,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACyB,MAAM,CAACd,IAAG,IAAKA,IAAI,CAACS,EAAC,KAAMA,EAAE,CAAC;QAChE,EAAE,OAAOZ,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;QACtE;MACJ;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}